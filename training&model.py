# -*- coding: utf-8 -*-
"""img_recog3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AUvp43ROer_X4WealmOKXV5X9ULt94l5
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install ipython-autotime
# %load_ext autotime
#tells the execution time of every cell

!pip install bing-image-downloader

!mkdir images

from bing_image_downloader import downloader
downloader.download("stop traffic sign",limit=200,output_dir='images',adult_filter_off=True)#select the category of image required
downloader.download("green traffic signal",limit=200,output_dir='images',adult_filter_off=True)
downloader.download("red traffic signal",limit=200,output_dir='images',adult_filter_off=True)
downloader.download("slow road sign",limit=200,output_dir='images',adult_filter_off=True)

rmdir /content/images/stop_traffic_sign/.ipynb_checkpoints

import os
import matplotlib.pyplot as plt
import numpy as np
import skimage
from skimage.io import imread
from skimage.transform import resize

target = []
images = []
flat_data = []

DATADIR = "/content/images"
CATEGORIES = ["green_traffic_signal", "red_traffic_signal", "slow_road_sign","stop_traffic_sign"]

count = 0
for category in CATEGORIES:
  class_num = CATEGORIES.index(category)
  path = os.path.join(DATADIR,category)
  # print(path)
  for img in os.listdir(path):
    img_array = imread(os.path.join(path,img))
    # print(img_array.shape)#(683, 1024, 3) -> height, width,3 tells us it is rgb image
    # plt.imshow(img_array)
    img_resized = resize(img_array,(150,150,3))#resizing, normalises the value from 0 to 1
    flat_data.append(img_resized.flatten())#flattening
    images.append(img_resized)
    target.append(class_num)

flat_data = np.array(flat_data)
target = np.array(target)
images = np.array(images)

len(flat_data[0])

target

unique,count = np.unique(target,return_counts=True)
plt.bar(CATEGORIES,count)

#split data into training and testing
#use sklearn to spilt datasets

from sklearn.model_selection import train_test_split
x_train, x_test, y_train,y_test = train_test_split(flat_data,target,test_size=0.3,random_state=109)

#svm used for classification on a dataset
#has 3 imp parameters -> regularisation, kernel,gamma

from sklearn.model_selection import GridSearchCV
from sklearn import svm
param_grid = [
              {'C':[1,10,100,1000],'kernel':['linear']},
              {'C':[1,10,100,1000],'gamma':[0.001,0.0001],'kernel':['rbf']},
]

svc = svm.SVC(probability=True)
clf = GridSearchCV(svc,param_grid)
clf.fit(x_train,y_train)

y_pred = clf.predict(x_test)
y_pred

y_test

from sklearn.metrics import accuracy_score, confusion_matrix

accuracy_score(y_pred,y_test)

confusion_matrix(y_pred,y_test)

#save model using pickle library

import pickle
pickle.dump(clf,open("img_model.p","wb"))

model = pickle.load(open('img_model.p',"rb"))
flat_data = []
url = "https://upload.wikimedia.org/wikipedia/commons/thumb/d/d2/Red_traffic_signal%2C_Stamford_Road%2C_Singapore_-_20111210-02.jpg/2592px-Red_traffic_signal%2C_Stamford_Road%2C_Singapore_-_20111210-02.jpg"
img = imread((url))
img_resized = resize(img,(150,150,3))
flat_data.append(img_resized.flatten())
y_out = model.predict(flat_data)
print("output: ",CATEGORIES[y_out[0]])

skimage.__version__

import sklearn

sklearn.__version__